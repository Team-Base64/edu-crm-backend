// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: microservices/chatServer/gen_files/chat.proto

// export PATH="$PATH:$(go env GOPATH)/bin"
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
// protoc --go_out=. --go-grpc_out=. --go-grpc_opt=paths=source_relative --go_opt=paths=source_relative microservices/chatServer/gen_files/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BotChat_StartChat_FullMethodName = "/chat.BotChat/StartChat"
)

// BotChatClient is the client API for BotChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotChatClient interface {
	// From server to bot
	// rpc Send (Message) returns (Status) {}
	// From api to bot
	// rpc Recieve (Message) returns (Status) {}
	StartChat(ctx context.Context, opts ...grpc.CallOption) (BotChat_StartChatClient, error)
}

type botChatClient struct {
	cc grpc.ClientConnInterface
}

func NewBotChatClient(cc grpc.ClientConnInterface) BotChatClient {
	return &botChatClient{cc}
}

func (c *botChatClient) StartChat(ctx context.Context, opts ...grpc.CallOption) (BotChat_StartChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &BotChat_ServiceDesc.Streams[0], BotChat_StartChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &botChatStartChatClient{stream}
	return x, nil
}

type BotChat_StartChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type botChatStartChatClient struct {
	grpc.ClientStream
}

func (x *botChatStartChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *botChatStartChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BotChatServer is the server API for BotChat service.
// All implementations must embed UnimplementedBotChatServer
// for forward compatibility
type BotChatServer interface {
	// From server to bot
	// rpc Send (Message) returns (Status) {}
	// From api to bot
	// rpc Recieve (Message) returns (Status) {}
	StartChat(BotChat_StartChatServer) error
	mustEmbedUnimplementedBotChatServer()
}

// UnimplementedBotChatServer must be embedded to have forward compatible implementations.
type UnimplementedBotChatServer struct {
}

func (UnimplementedBotChatServer) StartChat(BotChat_StartChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StartChat not implemented")
}
func (UnimplementedBotChatServer) mustEmbedUnimplementedBotChatServer() {}

// UnsafeBotChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotChatServer will
// result in compilation errors.
type UnsafeBotChatServer interface {
	mustEmbedUnimplementedBotChatServer()
}

func RegisterBotChatServer(s grpc.ServiceRegistrar, srv BotChatServer) {
	s.RegisterService(&BotChat_ServiceDesc, srv)
}

func _BotChat_StartChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BotChatServer).StartChat(&botChatStartChatServer{stream})
}

type BotChat_StartChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type botChatStartChatServer struct {
	grpc.ServerStream
}

func (x *botChatStartChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *botChatStartChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BotChat_ServiceDesc is the grpc.ServiceDesc for BotChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.BotChat",
	HandlerType: (*BotChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartChat",
			Handler:       _BotChat_StartChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "microservices/chatServer/gen_files/chat.proto",
}
