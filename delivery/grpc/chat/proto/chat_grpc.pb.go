// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: delivery/grpc/chat/proto/chat.proto

// export PATH="$PATH:$(go env GOPATH)/bin"
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
// protoc --go_out=. --go-grpc_out=. --go-grpc_opt=paths=source_relative --go_opt=paths=source_relative delivery/grpc/chat/proto/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatController_BroadcastMsg_FullMethodName     = "/chat.ChatController/BroadcastMsg"
	ChatController_SendNotification_FullMethodName = "/chat.ChatController/SendNotification"
)

// ChatControllerClient is the client API for ChatController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatControllerClient interface {
	BroadcastMsg(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*Nothing, error)
	SendNotification(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Nothing, error)
}

type chatControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatControllerClient(cc grpc.ClientConnInterface) ChatControllerClient {
	return &chatControllerClient{cc}
}

func (c *chatControllerClient) BroadcastMsg(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, ChatController_BroadcastMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatControllerClient) SendNotification(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, ChatController_SendNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatControllerServer is the server API for ChatController service.
// All implementations must embed UnimplementedChatControllerServer
// for forward compatibility
type ChatControllerServer interface {
	BroadcastMsg(context.Context, *BroadcastMessage) (*Nothing, error)
	SendNotification(context.Context, *Message) (*Nothing, error)
	mustEmbedUnimplementedChatControllerServer()
}

// UnimplementedChatControllerServer must be embedded to have forward compatible implementations.
type UnimplementedChatControllerServer struct {
}

func (UnimplementedChatControllerServer) BroadcastMsg(context.Context, *BroadcastMessage) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMsg not implemented")
}
func (UnimplementedChatControllerServer) SendNotification(context.Context, *Message) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedChatControllerServer) mustEmbedUnimplementedChatControllerServer() {}

// UnsafeChatControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatControllerServer will
// result in compilation errors.
type UnsafeChatControllerServer interface {
	mustEmbedUnimplementedChatControllerServer()
}

func RegisterChatControllerServer(s grpc.ServiceRegistrar, srv ChatControllerServer) {
	s.RegisterService(&ChatController_ServiceDesc, srv)
}

func _ChatController_BroadcastMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatControllerServer).BroadcastMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatController_BroadcastMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatControllerServer).BroadcastMsg(ctx, req.(*BroadcastMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatController_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatControllerServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatController_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatControllerServer).SendNotification(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatController_ServiceDesc is the grpc.ServiceDesc for ChatController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatController",
	HandlerType: (*ChatControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastMsg",
			Handler:    _ChatController_BroadcastMsg_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _ChatController_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery/grpc/chat/proto/chat.proto",
}
